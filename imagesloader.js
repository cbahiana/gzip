/* do not edit this file! */
// @ts-check
/**
 * lazy image laoder
 * @package     GZip Plugin
 * @copyright   Copyright (C) 2005 - 2018 Thierry Bela.
 *
 * dual licensed
 *
 * @license     LGPL v3
 * @license     MIT License
 */
LIB.ready((function(e) {
    function t() {
        LIB.images.lazy(".image-placeholder").on({
            /**
			 *
			 * @param {HTMLImageElement} img
			 * @param {HTMLImageElement} oldImage
			 */
            preload(e, t) {
                const r = !("currentSrc" in e);
                r ? t.insertAdjacentHTML("beforebegin", '<span class=image-placeholder-wrapper><span class=image-placeholder-svg><svg width=100% height=100% version=1.1 xmlns=http://www.w3.org/2000/svg ><image xlink:href="' + (e.currentSrc || e.src) + '" width=100% height=100% filter=url(#blur-lqip) x=0 y=0 />"') : t.insertAdjacentHTML("beforebegin", "<span class=image-placeholder-wrapper><span class=image-placeholder-opacity><span class=image-placeholder-element style=\"background-image:url('" + (e.currentSrc || e.src) + "')\">");
                const s = t.previousElementSibling;
                if (r) {
                    if ("function" != typeof window.CustomEvent) {
                        window.Event.prototype;
                    }
                    const t = s.querySelector("svg");
                    //   const svgImage = container.querySelector('svg image');
                                        function i() {
                        const e = this.height, r = this.width;
                        t.setAttribute("height", e), t.setAttribute("width", r);
                    }
                    e.addEventListener("sourcechange", i), e.addEventListener("load", i);
                }
                t.classList.remove("image-placeholder", "image-placeholder-lqip", "image-placeholder-svg"), 
                s.insertBefore(t, s.firstElementChild);
            },
            load: r,
            error(e, t, s) {
                r(t, s);
            }
        });
    }
    function r(t, r) {
        r.dataset.src && (r.src = r.dataset.src), r.dataset.srcset && (r.srcset = r.dataset.srcset), 
        setTimeout((function() {
            let t = r;
            for (r.removeAttribute("data-srcset"), r.removeAttribute("data-src"), r.classList.add("image-placeholder-complete"); t != e && !t.classList.contains("image-placeholder-wrapper"); ) t = t.parentElement;
            //	container.classList.add("image-placeholder-complete");
                        t.parentElement.insertBefore(r, t), setTimeout((function() {
                r.classList.remove("image-placeholder-complete"), t.parentElement.removeChild(t);
            }), 10);
        }), 10);
    }
    if (
    // intersection-observer.min.js
    "srcset" in new Image || 
    //    try {
    document.body.insertAdjacentHTML("beforeend", "<svg xmlns=http://www.w3.org/2000/svg width=1 height=1><defs><filter id=blur-lqip width=100% height=100% ><feGaussianBlur stdDeviation=20 /></filter></defs></svg>"), 
    "IntersectionObserver" in window && "IntersectionObserverEntry" in window && "intersectionRatio" in IntersectionObserverEntry.prototype) "isIntersecting" in IntersectionObserverEntry.prototype || Object.defineProperty(IntersectionObserverEntry.prototype, "isIntersecting", {
        get: function() {
            return this.intersectionRatio > 0;
        }
    }), t(); else {
        const e = document.createElement("script");
        /*script.onreadystatechange =*/        e.onload = t, e.defer = !0, e.async = !0, 
        e.src = "{script-src}", document.body.appendChild(e);
    }
}));