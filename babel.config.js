(function () {
  'use strict';

  // @ts-check
  /**
   * Babel transform settings
   * @package     GZip Plugin
   * @copyright   Copyright (C) 2005 - 2018 Thierry Bela.
   *
   * dual licensed
   *
   * @license     LGPL v3
   * @license     MIT License
   */
  /*
  {
    "targets": {
      "chrome": "58",
      "ie": "11"
    }
  }

  const filename = "example.js";
  const source = fs.readFileSync(filename, "utf8");

  // Load and compile file normally, but skip code generation.
  const { ast } = babel.transformSync(source, { filename, ast: true, code: false });

  // Minify the file in a second pass and generate the output code here.
  const { code, map } = babel.transformFromAstSync(ast, source, {
    filename,
    presets: ["minify",
  ['env', {
    "targets": {
      "ie": "11"
    }
  }]],
    babelrc: false,
    configFile: false,
  });
   */

  const preamble = "/* do not edit this file! */\n";

  const legacyPreset = {
    presets: [
      ['env', {
        targets: {
          ie: '11'
        }
      }]
    ]
  };

  const minifyPreset = {
    comments: false,
    plugins: [
      ["transform-remove-console", {
        removeConsole: {
          "exclude": ["error", "warn", 'info']
        }
      }]
    ],
    presets: [
      ['minify', {

      }],

      ['env', {

        targets: {
          "browserslist": "> 0.25%, not dead"
        },
        "exclude": ["typeof-symbol",
          'transform-typeof-symbol'
        ]
      }]
    ]
  };

  const defaultConfig = {

    preamble: '',
    filename: '',
    presets: [],
    babelrc: false,
    configFile: false
  };

  const imageLoader = {
    ...defaultConfig,
    preamble,
    filename: "./imagesloader.es6",
    output: "./imagesloader.js",
    ...legacyPreset
  };

  const imageLoaderMin = {
    ...defaultConfig,
    filename: "./imagesloader.es6",
    output: "./imagesloader.min.js",
    ...minifyPreset
  };

  imageLoaderMin.presets.pop();
  imageLoaderMin.presets.unshift(legacyPreset.presets[0]);

  const loaderMin = {
    ...defaultConfig,
    filename: "./loader.js",
    output: "./loader.min.js",
    ...minifyPreset
  };

  const intersectionObserver = {
    ...defaultConfig,
    filename: "./js/lib/intersection-observer.js",
    output: "./js/dist/intersection-observer.js"
  };

  const intersectionObserverMin = {
    ...defaultConfig,
    filename: "./js/dist/intersection-observer.js",
    output: "./js/dist/intersection-observer.min.js",
    ...minifyPreset
  };

  const libReadyMin = {
    ...defaultConfig,
    filename: "./js/dist/lib.ready.js",
    output: "./js/dist/lib.ready.min.js",
    ...minifyPreset
  };

  const libImagesMin = {
    ...defaultConfig,
    filename: "./js/dist/lib.images.js",
    output: "./js/dist/lib.images.min.js",
    ...minifyPreset
  };

  var config = /*#__PURE__*/Object.freeze({
    imageLoader: imageLoader,
    imageLoaderMin: imageLoaderMin,
    loaderMin: loaderMin,
    intersectionObserver: intersectionObserver,
    intersectionObserverMin: intersectionObserverMin,
    libReadyMin: libReadyMin,
    libImagesMin: libImagesMin
  });

  // @ts-check

  const fs = require("fs");
  const babel = require("@babel/core");

  for (let name in config) {
      (async function (config, name) {
          try {

              const {
                  filename,
                  output,
                  preamble
              } = config;

              delete config.output;
              delete config.preamble;

              const source = fs.readFileSync(filename, "utf8");

              // Load and compile file normally, but skip code generation.
              const {
                  ast
              } = babel.transformSync(source, {
                  filename,
                  ast: true,
                  code: false
              });

              // Minify the file in a second pass and generate the output code here.
              const {
                  code
              } = babel.transformFromAstSync(ast, source, config);

              fs.writeFileSync(output, preamble + code);

              console.log({
                  name
              });
          } catch (error) {
              console.log({
                  name,
                  error
              });
          }
      })(config[name], name);
  }

}());
